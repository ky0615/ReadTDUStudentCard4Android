apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'

apply plugin: 'io.fabric'
apply plugin: 'com.github.ben-manes.versions'

def packageName = "moe.linux.readcard.tdu"

android {
    compileSdkVersion 25
    buildToolsVersion "25.0.2"

    defaultConfig {
        applicationId packageName
        minSdkVersion 15
        targetSdkVersion 25
        multiDexEnabled true
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        vectorDrawables.useSupportLibrary = true

        manifestPlaceholders = [
                fabric_api_key: 0
        ]

        buildConfigField "String", "BASE_PACKAGE_ID", String.format("\"%s\"", packageName);
    }

    signingConfigs {
        release {
            v2SigningEnabled true
        }
    }

    packagingOptions {
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/services/javax.annotation.processing.Processor'
    }

    dataBinding {
        enabled = true
    }

    buildTypes {
        debug {
            minifyEnabled false
            debuggable true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }

        release {
            minifyEnabled true
            debuggable false
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
    }

    productFlavors {
        local {
            applicationId packageName + ".local"
            buildConfigField "String", "API_BASE", "\"https://hogehoge.com\""

            manifestPlaceholders = [
                    facebookKey: 0
            ]
        }

        production {
            applicationId packageName
            buildConfigField "String", "API_BASE", "\"https://hogehoge.com\""

            manifestPlaceholders = [
                    facebookKey: 0
            ]
        }
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
        test.java.srcDir 'src/androidTest/kotlin'

    }

    lintOptions {
        disable 'InvalidPackage'
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])

    // Kotlin
    compile "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    compile "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"

    // Google Support Library
    compile "com.android.support:appcompat-v7:${support_lib_version}"
    compile "com.android.support:support-annotations:${support_lib_version}"
    compile "com.android.support:design:${support_lib_version}"
    compile "com.android.support:cardview-v7:${support_lib_version}"
    compile "com.android.support:recyclerview-v7:${support_lib_version}"
    compile "com.android.support:customtabs:${support_lib_version}"

    compile 'com.android.support:multidex:1.0.0'

    // DataBinding
    kapt 'com.android.databinding:compiler:2.3.0'

    // Firebase
    compile 'com.google.firebase:firebase-core:10.2.0'
    compile 'com.google.firebase:firebase-database:10.2.0'

    // Dagger
    compile 'com.google.dagger:dagger:2.8'
    kapt 'com.google.dagger:dagger-compiler:2.8'

    // Retrofit
    compile 'com.squareup.retrofit2:retrofit:2.1.0'
    compile 'com.jakewharton.retrofit:retrofit2-rxjava2-adapter:1.0.0'
    compile 'com.squareup.retrofit2:converter-gson:2.1.0'

    // RxJava
    compile 'io.reactivex.rxjava2:rxjava:2.0.0'
    compile 'io.reactivex.rxjava2:rxandroid:2.0.0'

    // okhttp
    compile 'com.squareup.okhttp3:okhttp:3.4.2'

    // picasso
    compile 'com.jakewharton.picasso:picasso2-okhttp3-downloader:1.1.0'
    compile 'com.squareup.picasso:picasso:2.5.2'

    // Paperparcel
    compile 'nz.bradcampbell:paperparcel:2.0.0'
    compile 'nz.bradcampbell:paperparcel-kotlin:2.0.0' // Optional
    kapt 'nz.bradcampbell:paperparcel-compiler:2.0.0'

    // Misc
    compile 'com.jakewharton.timber:timber:4.3.1'

    testCompile 'junit:junit:4.12'
    testCompile 'com.github.gfx.android.robolectricinstrumentation:robolectric-instrumentation:3.1.4'
    testCompile('com.squareup.assertj:assertj-android:1.1.1') {
        exclude group: 'com.android.support', module: 'support-annotations'
    }
    testCompile 'org.mockito:mockito-all:1.10.19'
    androidTestCompile('com.android.support.test:runner:0.4.1') {
        exclude group: 'com.android.support', module: 'support-annotations'
    }
    androidTestCompile('com.android.support.test:rules:0.4.1') {
        exclude group: 'com.android.support', module: 'support-annotations'
    }
    androidTestCompile('com.squareup.assertj:assertj-android:1.1.1') {
        exclude group: 'com.android.support', module: 'support-annotations'
    }
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.1') {
        exclude group: 'com.android.support', module: 'support-annotations'
    }
    androidTestCompile('com.android.support.test.espresso:espresso-intents:2.2.1') {
        exclude group: 'com.android.support', module: 'support-annotations'
    }
}

def Properties signProps = new Properties()
def signFile = new File("signing.properties")
if (signFile.canRead()) {
    signProps.load(new FileInputStream(signFile))

    if (signProps != null) {
        android.signingConfigs.release.storeFile = file(signProps['STORE_FILE'])
        android.signingConfigs.release.storePassword = signProps['STORE_PASSWORD']
        android.signingConfigs.release.keyAlias = signProps['KEY_ALIAS']
        android.signingConfigs.release.keyPassword = signProps['KEY_PASSWORD']
    }
} else {
    println "signing.properties is not found"
    android.buildTypes.release.signingConfig = null
}


def Properties fabricProps = new Properties()
def fabricFile = new File("app/fabric.properties")
if (fabricFile.canRead()) {
    fabricProps.load(new FileInputStream(fabricFile))

    if (fabricProps != null) {
        android.defaultConfig.manifestPlaceholders["fabric_api_key"] = fabricProps['apiKey']
    }
} else {
    println "fabric.properties is not found"
}
buildscript {
}

apply plugin: 'com.google.gms.google-services'
